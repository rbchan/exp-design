\documentclass[color=usenames,dvipsnames]{beamer}
%\documentclass[color=usenames,dvipsnames,handout]{beamer}

%\usepackage[roman]{../../pres1}
\usepackage[sans]{../../pres1}
%\usepackage{Sweave}
\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{pgfpages}
\usepackage{verbatim}
%\usepackage{color}
%\usepackage[T1]{fontenc}
\usepackage{framed}


\hypersetup{pdfpagemode=UseNone,pdfstartview=FitV}




%% \mode<handout>{
%%   \usetheme{default}
%% %  \setbeamercolor{background canvas}{bg=black!5}
%%   \pgfpagesuselayout{4 on 1}[letterpaper,landscape,border shrink=2.5mm]
%% %  \pgfpagesuselayout{2 on 1}[letterpaper,border shrink=10mm]
%% }




\title{Lab 1 -- Introduction to {\bf R}}
\author{Richard Chandler and Bob Cooper}
\date{August 13 \& 14, 2018}

%\newcommand{\R}{{\bf R}}


%% Switching from Sweave to knitr
%\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontshape=sl,formatcom=\color{red}}
%\DefineVerbatimEnvironment{Soutput}{Verbatim}{formatcom=\color{MidnightBlue}}
%\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl}


% <<knitr-setup, include=FALSE>>=
% opts_hooks$set(comment=function(x) return("comment"=NA))
% ##knit_hooks$set(inline = function(x) {
% ##    if(!require(highr)) {
% ##        install.packages("highr")
% ##    }
% ##    if (is.numeric(x)) return(knitr:::format_sci(x, 'latex'))
% ##    highr:::hi_latex(x)
% ##})
% @


<<knitr-theme, include=FALSE>>=
##knit_theme$set("navajo-night")
knit_theme$set("edit-kwrite")
@



<<knitr-setup, include=FALSE>>=
##opts_chunk$set(comment=NA)
@


%% New command for inline code that isn't to be evaluated
\definecolor{inlinecolor}{rgb}{0.878, 0.918, 0.933}
\newcommand{\inr}[1]{\colorbox{inlinecolor}{\texttt{#1}}}




\begin{document}

% This would affect all code boxes. Not a good idea.
% \setlength\fboxsep{0pt}



\begin{frame}[plain]
  \LARGE
%  \maketitle
  {\centering
%  \textcolor{RoyalBlue}{\huge \bf Lab 1 -- Introduction to \R} \\
  {\huge \bf Lab 1 -- Introduction to \R} \\
  \vspace{0.9cm}
  \includegraphics[width=0.4\textwidth]{figs/Rlogo} \\
  \vspace{0.5cm}
  August 13 \& 14, 2018 \\
  FANR 6750 \par
  \vfill
  Richard Chandler and Bob Cooper \\
  }
\end{frame}




\section{Why Use \R?}


\begin{frame}[plain]
  \frametitle{Today's Topics}
  \Large
  \only<1>{\tableofcontents}%[hideallsubsections]}
  \only<2 | handout:0>{\tableofcontents[currentsection]}%,hideallsubsections]}
\end{frame}



\begin{frame}
  \frametitle{Good and Not So Good Things About \R}
%  {\Large \textcolor{bb}{Good}}
  {\Large Good}
  \large
  \begin{itemize}%[<+->]
    \item<1-> Flexible %If you're going to use a stats program, might as well use one that does everything!
%    \item<1-> Many \inr{packages} \colorbox{BurntOrange}{written} for ecologists
    \item<1-> Many packages written for ecologists
    \item<1-> It's free
    \item<1-> Scripts save time
    \item<1-> \R~teaches you statistics
  \end{itemize}
  \vspace{0.5cm}
  \uncover<2->{
%  \pause
  {\Large Not so good??}}
  \begin{itemize}
    \item<2-> Steep learning curve
    \item<2-> Help pages written for people familiar with \R
    \item<2-> Developed by statisticians for statisticians
    \item<2-> Not as fast as some languages
  \end{itemize}
%  }
\end{frame}




%\begin{frame}
%  \frametitle{Not So Good Things About \R}
%\end{frame}




\section{Installing \R}





\begin{frame}
  \frametitle{Downloading \R}
  \begin{columns}
    \begin{column}{0.4\textwidth}
      \small
      \begin{itemize}
      \item Go to \url{www.r-project.org}
      \item Click on ``CRAN''
      \item Choose a mirror near you (there is one in TN)
      \end{itemize}
    \end{column}
    \begin{column}{0.6\textwidth}
      \fbox{\includegraphics[width=\textwidth]{figs/download-R-win}} \par
      \fbox{\includegraphics[width=\textwidth]{figs/download-R}}
    \end{column}
  \end{columns}
\end{frame}



\begin{frame}
  \frametitle{Using the \R~GUI}
  \R's ``Graphical User Interface'' is operating system specific. Here
  is how it looks under Windows.
  \begin{center}
    \includegraphics[width=\textwidth]{figs/R-GUI-win}
  \end{center}
\end{frame}



\begin{frame}
  \frametitle{Alternatives to the \R~Gui}
  \begin{columns}
    \small
    \begin{column}{0.6\textwidth}
      \centering
      Emacs and ESS \\ \tiny
      \url{http://vgoulet.act.ulaval.ca/en/emacs/} \par
      \includegraphics[width=\textwidth]{figs/emacs}
    \end{column}
    \begin{column}{0.4\textwidth}
      \centering
      RStudio \\
      \url{http://www.rstudio.com/} \par
      \includegraphics[width=\textwidth]{figs/Rstudio}
    \end{column}
  \end{columns}
%  \pause
  \small
  \vspace{0.5cm}
  You are encouraged to learn and use these programs, but we will not use them for instruction
\end{frame}


\section{Basic Usage}




%\begin{frame}
%  \frametitle{Today's Topics}
%  \Large
%  \tableofcontents[currentsection]%,hideallsubsections]
%\end{frame}

\subsection{Basic calculations}




\begin{frame}[fragile]
  \frametitle{How to read the code in these slides}
  Anything in a shaded box like this one is \R~code:
<<add2>>=
2+2
@
\pause \vfill
  The line \inr{2+2} is \R~code (\alert{input}). You can copy
  and paste it into the console. Note that the command prompt (\verb+>+) is
  not shown in these slides.
\vfill
  The line \inr{\#\# [1] 4} is \alert{output}. Output is
  commented out by 2 hash signs (\texttt{\#\#}).
\pause \vfill
  You can copy and paste the entire code box directly into your
  console. However, it might be easier to work with the \R~script
  that accompanies the PDF. In this case, the script is called
  \texttt{lab-intro-to-R.R}.
\end{frame}






\begin{frame}[fragile]
  \frametitle{Overgrown calculator}
%  \includegraphics[width=\textwidth]{figs/math-ops}
  \small
%  Simple addition
%<<add, size='small'>>=
%2+2
%@
%\pause \vfill
  Square-root of 3
<<sq3, size='small'>>=
sqrt(3)
@
\pause \vfill
  6 squared
<<six2, size='small'>>=
6^2
@
\pause \vfill
  cosine of $\pi$
<<cos-pi, size='small'>>=
cos(pi)
@
%<<pi>>=
%pi
%@
\end{frame}













%\begin{frame}[fragile]
%\frametitle{What is 2 plus 2????}
%
%2+2
%
%\end{frame}


%\begin{frame}
%  \frametitle{Functions}
%  Functions take arguments and return a result
%\end{frame}






%\section{Data frames}





\begin{frame}[fragile]
  \frametitle{Objects and assignment arrow}
%  {\Large Important things to know about objects:}
%  \begin{itemize}[<+->]
%    \item
      Everything in \R~is an object. We can create objects using the
      \inr{<-} assignment arrow.
      \pause \vfill
%    \item
      In this example, \inr{y} is an object storing the number 2:
<<y-def>>=
y <- 2
@
\pause \vfill
%    \item The \colorbox{inlinecolor}{\texttt{<-}} arrow assigns the value \Sexpr{y} to the object \texttt{y}.
%    \item
The \inr{<-} arrow assigns the value 2 to the object \inr{y}.
      \pause \vfill
%    \item
      You cannot have a space between \inr{<} and \inr{-}
      \pause \vfill
%    \item
      You can use \inr{=} instead of \inr{<-} but this can cause confusion
      \pause \vfill
%    \item
      Typing the name of an object returns its value:
<<y>>=
y
@
%  \end{itemize}
\end{frame}


\subsection{Vectors}


\begin{frame}[fragile]
  \frametitle{Vectors}
%  \begin{itemize}[<+->]
%    \item
We store information in objects so that they can be easily manipulated:
<<y-math, size='small'>>=
y*2+1
@
%    \item
\pause \vfill
Usually, we want more than one number in an object. In statistics, a
vector is simply a set of numbers that can be thought of as a row or
column of a matrix \\
%\item
\pause \vfill
The easiest way to create a vector is to use the \inr{c}
function to ``combine'' numbers:
<<z-def, size='small'>>=
z <- c(-1, 9, 33, -4)
z
@
%  \end{itemize}
\end{frame}



%% \begin{frame}[fragile]
%%   \frametitle{Vectors}
%% %  \begin{block}{Definition}
%% %  \Large
%%   \begin{itemize}
%% %    \item In statistics, a vector is a set of numbers
%%     \item The easiest way to create a vector is to use the \verb+c+
%%       function to ``combine'' numbers
%%   \end{itemize}
%% <<>>=
%% x <- c(1, 2, 3, 9, -100)
%% x
%% @
%% %  \end{block}
%% %  This code creates a vector of continuous numbers:

%% \end{frame}


%\begin{frame}
%  \frametitle{More about the assignment arrow}
%
%\end{frame}


\begin{frame}[fragile]
  \frametitle{Other useful ways of creating vectors}
%\begin{itemize}[<+->]
%  \item The easiest way to create a vector is to use the \verb+c+
%      function to ``combine'' numbers
%<<>>=
%x1 <- c(1, 2, 3, 9, -100)
%x1
%@
%  \item
A sequence of numbers
<<x1, size='small'>>=
x1 <- 1:3 # Same as: x1 <- c(1, 2, 3)
          # Note: anything after "#" is a comment
x1
@
%\item
\inr{seq} is more general
%% <<>>=
%% x2 <- seq(from=1, to=3, by=1)
%% x2
%% @
%% \item[]
<<x2, size='small'>>=
x2 <- seq(from=1, to=7, by=2)
x2
@
%\item
Use \inr{rep} to repeat elements of a vector
<<rep, size='small'>>=
rep(x2, times=2)
@
%\end{itemize}
\end{frame}



\begin{frame}[fragile]
  \frametitle{Help with a function}
\LARGE
These do the same thing
<<help,eval=FALSE>>=
?rep
help(rep)
@
\end{frame}




\begin{frame}[fragile]
  \frametitle{Types of vectors}
%  \begin{itemize}[<+->]
%  \item
  Numeric vectors are used for continuous variables
<<y1-class, size='small'>>=
y1 <- c(2.1, 3.5, 99.0)
class(y1)
@
%  \item
\pause \vfill
  Names can be stored as character vectors
<<y2-class, size='small'>>=
y2 <- c("Treatment", "Control")
class(y2)
@
%  \item
\pause \vfill
Factors are similar, but they keep track of levels
<<y3-factor, size='small'>>=
y3 <- factor(rep(y2, each=2))
y3
@
%  \end{itemize}
\end{frame}



\begin{frame}[fragile]
  \frametitle{Vectorized arithmetic}
  How could we calculate the body mass index (BMI = $\text{weight}/\text{height}^2$) from the following data:
  \begin{center}
    \begin{tabular}{ccccccc}
      \hline
      & \multicolumn{6}{c}{Individual} \\
      \cline{2-7}
      & 1 & 2 & 3 & 4 & 5 & 6 \\
      \hline
      Weight & 60 & 72 & 57 & 90 & 95 & 72 \\
      Height & 1.8 & 1.8 & 1.7 & 1.9 & 1.7 & 1.9 \\
      \hline
    \end{tabular}
  \end{center}
  \pause
  First, create the vectors:
<<wt-ht>>=
weight <- c(60, 72, 57, 90, 95, 72)
height <- c(1.8, 1.8, 1.7, 1.9, 1.7, 1.9)
@
  \pause
  Then, evaluate the equation in just one line:
<<bmi, size='small'>>=
BMI <- weight/height^2
BMI
@
\end{frame}



\begin{frame}
  \frametitle{In-class assignment 1}
  {\bf Calculate the circumference and area of circles with radii: 3, 5, 6, 11} \\
  \pause
  \vspace{0.5cm}
  \begin{enumerate}[\bf (1)]
    \item Create a new script called ``lab1-prob1.R''
    \item Create a vector containing the radii
    \item Store the computed circumferences and areas in 2 new vectors
  \end{enumerate}
  \vspace{1cm}
  \alert{You should be able to do this in just 3 lines in your script.}
\end{frame}




\begin{frame}[fragile]
  \frametitle{A common beginner's problem}
  If you accidentally hit ``return'' or fail to complete a command, you
  will see the cursor on a new line beginning with \verb_+_ instead of
  \verb+>+. \\
  \pause
  \begin{center}
    \includegraphics[width=0.7\textwidth]{figs/plus-prompt}
  \end{center}
  \pause
  Just hit the ``Esc'' key or complete the command.
\end{frame}




% NOTE: Make them do this by hand
\begin{frame}[fragile]
  \frametitle{Summarizing vectors}
  \small
  \begin{center}
    \begin{tabular}{ccccc}
      \hline
%      & \multicolumn{5}{c}{Number of chiggers on 5 different people} \\
      \multicolumn{5}{c}{Number of chiggers} \\
      \hline %\cline{1-5}
      $y_1$ & $y_2$ & $y_3$ & $y_4$ & $y_5$ \\
      \hline
      4 & 7 & 2 & 3 & 150 \\
      \hline
    \end{tabular}
  \end{center}
%\begin{itemize}
%\item
What is the sum of this vector? $\sum_{i=1}^5 y_i$ = ???
  \pause
<<y-sum, size='footnotesize'>>=
y <- c(4,7,2,3,150)
sum(y)
@
\pause
%\item \large
What is the mean? $\frac{\sum_{i=1}^5 y_i}{5}$ = ???
  \pause
<<y-mean, size='footnotesize'>>=
mean(y)
@
  \pause
%\item
  And the variance? $\frac{\sum_{i=1}^5 (y_i - \bar{y})^2}{5-1}$ = ???
<<y-var, size='footnotesize'>>=
var(y)
@
%\end{itemize}
\end{frame}


%\end{document}


%\subsection{Indexing}


\begin{frame}[fragile]
  \frametitle{Indexing vectors}
%  \begin{itemize}[<+->]
%  \item
  Extract the first and third elements of a vector
<<y-sub>>=
y <- c(2, 4, 8, 4, 25)
y.sub <- y[c(1,3)]
y.sub
@ %def
%\item
\pause \vfill
Remove the second element
<<>>=
y[-2]
@
\pause \vfill
%\item
Rearrange the order of the vector
<<>>=
y[c(5,4,3,2,1)]
@
%\end{itemize}
\end{frame}


\begin{frame}[fragile]
  \frametitle{Indexing vectors}
%\begin{itemize}[<+->]
%  \item
  \small
  Which elements of the vector equal 4? (logical indexing)
<<y-is4, size='small'>>=
y <- c(2, 4, 6, 4, 25)
y == 4
y[y == 4]
@
%  \item
\pause \vfill
Add missing values, then remove them
<<y-toNA, size='small'>>=
y[c(3,5)] <- NA
y
@
%  \item[]
\pause \vfill
<<y-test-sub, size='small'>>=
!is.na(y)
y[!is.na(y)]
@
%\end{itemize}
\end{frame}


\subsection{Data frames}


\begin{frame}[fragile]
  \frametitle{Data frames}
  \large
%  \begin{itemize}[<+->]
%    \item
  Most basic datasets are stored as \verb+data.frame+s
  \pause \vfill
%    \item
  They are like a matrix in which each column can be a
      different type of vector (numeric, factor, etc...)
%    \item
  \pause \vfill
   They have attributes for row names (e.g. the names of
      the experimental units) and column names (e.g. the names of
      the response and predictor variables)
%  \end{itemize}
\end{frame}



\begin{frame}[fragile]
  \frametitle{Creating a data frame}
  {\LARGE 3 variables measured at 4 sites}
<<datfr1>>=
y <- c(3, 9, 7, 4)
x1 <- factor(c('High', 'High', 'Low', 'Low'))
x2 <- c(2.2, 3.4, 4.4, 3.9)
mydata <- data.frame(Goats=y, Elev=x1, Temp=x2)
rownames(mydata) <- c('Site1', 'Site2', 'Site3', 'Site4')
mydata
@
\end{frame}


\begin{frame}[fragile]
  \frametitle{Indexing data frames}
%  \begin{itemize}[<+->]
%    \item
  Bracket method. Row 1, columns 1 and 3
<<mydat-sub1>>=
mydata[1,c(1,3)]
@
%    \item
Bracket method. Rows 2 and 3, columns 1 and 3
<<mydat-sub2>>=
mydata[c('Site2', 'Site3'), c('Goats', 'Temp')]
@
%    \item
Dollar sign method. Pull out column 1
<<mydat-sub3>>=
mydata$Elev
@
%  \end{itemize}
\end{frame}


\begin{frame}[fragile]
  \frametitle{Summarizing data frames}
%  \begin{itemize}[<+->]
%    \item
  Open up a `spreadsheet'
<<eval=FALSE>>=
View(mydata)
@
%    \item
Compute some summary statistics
{\small
<<smry, size='footnotesize'>>=
summary(mydata)
@
}
%    \item
A very compact and hard-to-understand-at-first summary
{\small
<<str, size='footnotesize'>>=
str(mydata)
@
}
%  \end{itemize}
\end{frame}



\subsection{Importing and Exporting Data}

\begin{frame}[fragile]
  \frametitle{Importing and exporting data}
  \verb+read.csv+ and \verb+write.csv+ are easy options, but there are
  many more possibilities
%  \begin{itemize}
%    \item
  Export the \verb+data.frame+ we created earlier
<<>>=
write.csv(mydata, file="mydata.csv")
@
%    \item
Confirm that it is there
{\small
<<>>=
getwd()
@
}
%    \item
Read it back in
<<>>=
mydata2 <- read.csv("mydata.csv")
@
%  \end{itemize}
\end{frame}






\begin{frame}[fragile]
  \frametitle{In-class assignment 2}
  \begin{enumerate}[\bf (1)]
    \item Create a \verb+data.frame+ that contains the information shown in the table below
    \item Export the \verb+data.frame+ as a .csv file.
    \item Import it back in
  \end{enumerate}
  \begin{center}
    \begin{tabular}{lccc}
      \hline
      Individual & Mass & Weight & Treatment \\
      \hline
      1 & 3 & 4 & Control \\
      2 & 3 & 5 & Control \\
      3 & 2 & 4 & Control \\
      4 & 4 & 6 & Treatment \\
      5 & 5 & 5 & Treatment \\
      6 & 5 & 7 & Treatment \\
      \hline
    \end{tabular}
  \end{center}
\end{frame}





\subsection{Removing objects and saving workspaces}

\begin{frame}[fragile]
  \frametitle{The workspace}
%  \begin{itemize}[<+->]
%    \item
  Viewing the objects in your workspace
<<ls, size='small'>>=
ls()
@
%    \item
\pause \vfill
Removing (deleting) some objects
<<rm>>=
rm(x1, x2, mydata2, y2, y3, height, weight, BMI,
   y, y1, z)
ls()
@
%  \end{itemize}
\end{frame}





\begin{frame}[fragile]
  \frametitle{Saving and restoring the workspace}
  \begin{center}
    \includegraphics[width=0.8\textwidth]{figs/save-workspace}
  \end{center}
  \pause
If you prefer commands over point-and-click:
<<eval=FALSE>>=
save.image("myimage.RData") # Save all objects to file
load("myimage.RData")       # Load the saved workspace
@
\end{frame}




\section{Getting help}



\begin{frame}[fragile]
  \frametitle{Additional Resources}
  \Large
%\begin{itemize}
%  \item
  `Official' manuals
<<eval=FALSE>>=
help.start()
@
%  \item[]
%  \item
Useful books
\begin{itemize}
  \large
\item Venables, W.N. and B.D. Ripley. 2002. Modern Applied Statistics with
  S, 4th ed. Springer.
\item Crawley, M.J.. 2013. The \R~Book, 2nd ed. Wiley
\end{itemize}
%  \item[]
%  \item
%\pause \vfill
Online
    \begin{itemize}
      \large
      \item Always Google your error messages
      \item \url{http://stackoverflow.com/}
      \item \url{https://preludeinr.com/}
    \end{itemize}
%\end{itemize}
\end{frame}


\begin{frame}[fragile]
  \frametitle{Assignment}
  \begin{columns}
    \begin{column}{0.3\textwidth}
      \includegraphics[width=1\textwidth]{figs/introStatsR} \\
%      \tiny
    \end{column}
    \begin{column}{0.6\textwidth}
      \begin{enumerate}[\bf (1)]
        \item Read chapters 1, 4, \& 5 for next week
        \item[]
        \item Create an R script to import a .csv file (you can use
          any file you want). Upload the script and the .csv file to
          ELC.
      \end{enumerate}
    \end{column}
  \end{columns}
  \vfill
  \footnotesize
  Dalgaard, P. 2008. Introductory Statistics with R. 2nd
  edition. Springer. \\
%  \vspace{0.3cm}
  Available for free through the UGA library: \\ \tiny
  \url{http://preproxy.galib.uga.edu/login?url=http://dx.doi.org/10.1007/978-0-387-79054-1}
\end{frame}



\end{document}
